plugins {
    id 'application'
    id 'org.beryx.jlink' version '2.17.1'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id "de.undercouch.download" version "4.0.0"
    id 'maven'
}

group 'com.wavesfx'
version '0.12.1'

sourceCompatibility = 13
targetCompatibility = 13

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

mainClassName = 'wavesfx/com.wavesfx.wavesfx.Main'

javafx {
    version = "13"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

compileJava {
    options.encoding = "UTF-8"
}

compileTestJava {
    options.encoding = "UTF-8"
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-core:2.12.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.12.1'
    implementation 'com.electronwill.night-config:toml:3.6.0'
    implementation 'org.kordamp.ikonli:ikonli-javafx:11.3.4'
    implementation 'org.kordamp.ikonli:ikonli-materialdesign-pack:11.3.4'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'io.reactivex.rxjava2:rxjavafx:2.2.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.12'
    implementation 'com.github.wavesfx:WavesJ:master-SNAPSHOT'
    testCompile group: 'junit', name: 'junit', version: '4.12'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.10.0'

}

//applicationDefaultJvmArgs = ['--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls']
applicationDefaultJvmArgs = ['-splash:./package/wavesfx_splash.png']

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

ext.os = org.gradle.internal.os.OperatingSystem.current()
ext.dir = "$buildDir"

jlink {
    launcher {
        name = 'WavesFX'
        if (os.windows){
            jvmArgs = ['-Djdk.tls.client.protocols=TLSv1.2', "-splash:wavesfx_splash.png"]
        } else {
            jvmArgs = ['-Djdk.tls.client.protocols=TLSv1.2', '-splash:$DIR/wavesfx_splash.png']
        }
    }
    forceMerge('log4j-api')
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    addExtraDependencies("javafx")

    jpackage {
        skipInstaller = false
        imageName = "WavesFX"
        installerName = 'WavesFX'
        appVersion = version
        installerOptions = [
                '--vendor', 'WavesFX',
                '--license-file', 'LICENSE'
        ]
        if (os.windows) {
            imageOptions = ['--icon', './package/wavesfx_icon.ico']
            jpackageHome = getJpackagePath("C:/Program Files/Java/jpackage")
            jvmArgs = ['-Djdk.tls.client.protocols=TLSv1.2', '-splash:$ROOTDIR/runtime/bin/wavesfx_splash.png']
            installerType = "msi"
            installerOptions += ['--win-upgrade-uuid', 'd4a56a68-bdc2-4138-8572-84fc72c11fbc',
                                '--win-dir-chooser',
                                '--win-menu',
                                '--win-shortcut'
            ]
        } else if(os.macOsX) {
            imageOptions = ['--icon', './package/wavesfx_mac_icon.icns',]
            jpackageHome = getJpackagePath('/usr/local/lib/jpackage')
            jvmArgs = ['-Djdk.tls.client.protocols=TLSv1.2', '-splash:$ROOTDIR/runtime/Contents/Home/bin/wavesfx_splash.png']
            installerType = 'dmg'
        } else if (os.unix) {
            imageOptions = ['--icon', './package/wavesfx_linux_icon.png']
            jvmArgs = ['-Djdk.tls.client.protocols=TLSv1.2', '-splash:$ROOTDIR/lib/runtime/bin/wavesfx_splash.png']
            jpackageHome = getJpackagePath('/usr/lib/jvm/jpackage')
            installerType = "deb"
            installerOptions += [
                    '--linux-shortcut'
            ]
        }
    }
}

def JLINK_DIR = "$buildDir"
tasks.jlink.doLast {
    copy {
        includeEmptyDirs = false
        from("package") {
            include "wavesfx_splash.png"
        }
        into JLINK_DIR + "/image/bin"
    }
}

String getJpackagePath(jpackageHome) {
    if(Boolean.getBoolean('download.jpackage')) {
        return downloadJPackage()
    } else {
        return jpackageHome
    }
}

String[] getJPackageCoordinates() {
    if(os.macOsX) return [
            'https://download.java.net/java/early_access/jdk14/27/GPL/openjdk-14-ea+27_osx-x64_bin.tar.gz',
            'tar.gz',
            'jdk-14.jdk/Contents/Home'
    ]
    if(os.windows) return [
            'https://download.java.net/java/early_access/jdk14/27/GPL/openjdk-14-ea+27_windows-x64_bin.zip',
            'zip',
            'jdk-14'
    ]
    return [
            'https://download.java.net/java/early_access/jdk14/27/GPL/openjdk-14-ea+27_linux-x64_bin.tar.gz',
            'tar.gz',
            'jdk-14'
    ]
}

String downloadJPackage() {
    def (url, extension, directory) = getJPackageCoordinates()
    def downloadDir = "$buildDir/download"
    tasks.jpackageImage.doFirst {
        def execExt = os.windows ? '.exe' : ''
        if(!file("$downloadDir/$directory/bin/jpackage$execExt").file) {
            def jdkArchivePath = "$downloadDir/jdk-jpackage.$extension"
            download {
                src url
                dest jdkArchivePath
                overwrite false
            }
            copy {
                from ((extension == 'tar.gz') ? tarTree(resources.gzip(jdkArchivePath)) : zipTree(jdkArchivePath))
                into downloadDir
            }
        }
    }
    return "$downloadDir/$directory"
}